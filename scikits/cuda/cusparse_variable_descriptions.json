{
    "A": "array of dimensions (lda, n)", 
    "B": "array of dimensions (ldb, n)", 
    "C": "array of dimensions (ldc, n)", 
    "X": "array of dimensions (ldx, n)", 
    "Y": "array of dimensions (ldy, n)", 
    "alpha": "scalar used for multiplication", 
    "base": "enumerated indexBase type", 
    "baseIdx": "enumerated indexBase type", 
    "batchCount": "number of systems to solve", 
    "batchStride": "stride (number of elements) that separates the vectors of every system (must be at least m)", 
    "beta": "scalar used for multiplication", 
    "blockDim": "block dimension of sparse matrix A, larger than zero.", 
    "blockSize": "block dimension of sparse matrix A, larger than zero.", 
    "boost_val": "boost value to replace a numerical zero", 
    "bscColPtr": "integer array of nb+1 elements that contains the start of every block column and the end of the last block column plus one", 
    "bscRowInd": "integer array of nnzb row indices of the non-zero blocks of matrix A", 
    "bscVal": "array of nnzb*rowBlockDim*colBlockDim non-zero elements of matrix A. It is only filled-in if copyValues is set to CUSPARSE_ACTION_NUMERIC", 
    "bsrColInd": "integer array of nnz ( = csrRowPtrA(mb) - csrRowPtrA(0) ) column indices of the nonzero blocks of matrix A", 
    "bsrColIndA": "integer array of nnz ( = csrRowPtrA(mb) - csrRowPtrA(0) ) column indices of the nonzero blocks of matrix A", 
    "bsrColIndC": "integer array of nnz ( = csrRowPtrC(mb) - csrRowPtrC(0) ) column indices of the nonzero blocks of matrix C", 
    "bsrEndPtr": "integer array of mb elements that contains the end of the every block row plus one", 
    "bsrEndPtrA": "integer array of mb elements that contains the end of the every block row plus one", 
    "bsrMaskPtr": "integer array of sizeOfMask elements that contains the indices corresponding to updated block rows", 
    "bsrMaskPtrA": "integer array of sizeOfMask elements that contains the indices corresponding to updated block rows", 
    "bsrRowPtr": "integer array of mb + 1 elements that contains the start of every block row and the end of the last block row plus one", 
    "bsrRowPtrA": "integer array of mb + 1 elements that contains the start of every block row and the end of the last block row plus one", 
    "bsrRowPtrC": "integer array of mb + 1 elements that contains the start of every block row and the end of the last block row plus one", 
    "bsrVal": "array of nnz ( = csrRowPtrA(mb) - csrRowPtrA(0) ) nonzero blocks of matrix A", 
    "bsrValA": "array of nnz ( = csrRowPtrA(mb) - csrRowPtrA(0) ) nonzero blocks of matrix A", 
    "bsrValC": "array of nnz ( = csrRowPtrC(mb) - csrRowPtrC(0) ) nonzero blocks of matrix C", 
    "c": "cosine element of the rotation matrix", 
    "colBlockDim": "number of columns within a block of A", 
    "colBlockDimA": "number of columns within a block of A", 
    "colBlockDimC": "number of columns within a block of C", 
    "cooRowInd": "integer array of nnz uncompressed row indices.", 
    "copyValues": "enumerated CUSPARSE_ACTION", 
    "cscColPtr": "integer array of n+1 elements that contains the start of every row and the end of the last column plus one", 
    "cscColPtrA": "integer array of n+1 elements that contains the start of every row and the end of the last column plus one", 
    "cscRowInd": "integer array of nnz ( = cscColPtrA(m) - cscColPtrA(0) ) row indices of the nonzero elements of matrix A", 
    "cscRowIndA": "integer array of nnz ( = cscColPtrA(m) - cscColPtrA(0) ) row indices of the nonzero elements of matrix A", 
    "cscVal": "array of nnz ( = cscColPtrA(m) - cscColPtrA(0) ) nonzero elements of matrix A", 
    "cscValA": "array of nnz ( = cscColPtrA(m) - cscColPtrA(0) ) nonzero elements of matrix A", 
    "csrColInd": "integer array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) column indices of the nonzero elements of matrix A", 
    "csrColIndA": "integer array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) column indices of the nonzero elements of matrix A", 
    "csrColIndB": "integer array of nnz ( = csrRowPtrB(m) - csrRowPtrB(0) ) column indices of the nonzero elements of matrix B", 
    "csrColIndC": "integer array of nnz ( = csrRowPtrC(m) - csrRowPtrC(0) ) column indices of the nonzero elements of matrix C", 
    "csrRowPtr": "integer array of m+1 elements that contains the start of every row and the end of the last row plus one", 
    "csrRowPtrA": "integer array of m+1 elements that contains the start of every row and the end of the last row plus one", 
    "csrRowPtrB": "integer array of m+1 elements that contains the start of every row and the end of the last row plus one", 
    "csrRowPtrC": "integer array of m+1 elements that contains the start of every row and the end of the last row plus one", 
    "csrVal": " array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) nonzero elements of matrix A", 
    "csrValA": " array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) nonzero elements of matrix A", 
    "csrValA_ValM": "array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) nonzero elements of matrix A", 
    "csrValA_valM": "array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) nonzero elements of matrix A", 
    "csrValB": " array of nnz ( = csrRowPtrB(m) - csrRowPtrB(0) ) nonzero elements of matrix B", 
    "csrValC": " array of nnz ( = csrRowPtrC(m) - csrRowPtrC(0) ) nonzero elements of matrix C", 
    "csrValM": "array of nnz ( = csrRowPtrA(m) - csrRowPtrA(0) ) nonzero elements of matrix A", 
    "d": "dense array containing the main diagonal of the tri-diagonal linear system", 
    "descr": "matrix descriptor", 
    "descrA": "matrix descriptor of sparse matrix A", 
    "descrB": "matrix descriptor of sparse matrix B", 
    "descrC": "matrix descriptor of sparse matrix C", 
    "descra": "matrix descriptor of sparse matrix A", 
    "diagType": "enumerated diagType", 
    "dir": "enumerated storage format direction", 
    "dirA": "enumerated storage format direction", 
    "dl": "dense array containing the lower diagonal of the tri-diagonal linear system. The first element of each lower diagonal must be zero", 
    "du": "dense array containing the upper diagonal of the tri-diagonal linear system. The last element of each upper diagonal must be zero", 
    "enable_boost": "disable boost by enable_boost=0; otherwise, boost is enabled", 
    "fillMode": "enumerated fill mode", 
    "handle": "cuSPARSE context handle", 
    "hybA": "cuSPARSE HYB data structure", 
    "idxBase": "enumerated indexBase type", 
    "info": "solve and analysis structure", 
    "k": "number of columns of A", 
    "kb": "number of block columns of sparse matrix A", 
    "lda": "leading dimension of A", 
    "ldb": "leading dimension of B", 
    "ldc": "leading dimension of C", 
    "ldx": "leading dimension of X", 
    "ldy": "leading dimension of Y", 
    "levelInd": "integer array of m (number of rows in the matrix) elements that contains the row indices belonging to every level", 
    "levelPtr": "integer array of nlevels+1 elements that contains the start of every level and the end of the last level plus one", 
    "m": "number of rows of A", 
    "mb": "number of block rows of matrix A", 
    "mode": "enumerated pointer mode", 
    "n": "number of columns of ", 
    "nb": "number of block columns of matrix A", 
    "nlevels": "number of levels", 
    "nnz": "number of non-zero elements", 
    "nnzA": "number of non-zero elements of matrix A", 
    "nnzB": "number of non-zero elements of matrix B", 
    "nnzPerCol": "array of size n containing the number of nonzero elements per column", 
    "nnzPerRow": "array of size n containing the number of nonzero elements per row", 
    "nnzPerRowCol": "array of size m or n containing the number of nonzero elements per row or column, respectively", 
    "nnzPerRowColumn": "array of size m or n containing the number of nonzero elements per row or column, respectively", 
    "nnzTotalDevHostPtr": "total number of nonzero elements in device or host memory", 
    "nnzb": "number of non-zero blocks of matrix A", 
    "pBuffer": "buffer allocated by the user", 
    "pBufferSizeInBytes": "number of bytes of the buffer used", 
    "pInputBuffer": "library version number", 
    "partitionType": "partitioning method to be used in the conversion", 
    "policy": "enumerated cuSPARSE solve policy", 
    "position": "if no structural or numerical zero, position is -1; otherwise if A(j,j) is missing or U(j,j) is zero, position=j", 
    "resultDevHostPtr": "pointer to result in the device or host memory", 
    "rowBlockDim": "number of rows within a block of A", 
    "rowBlockDimA": "number of rows within a block of A", 
    "rowBlockDimC": "number of rows within a block of C", 
    "s": "sine element of the rotation matrix", 
    "sizeOfMask": "number of updated block rows of y ", 
    "streamId": "stream to be used by the library", 
    "tol": "tolerance to determine a numerical zero", 
    "trans": "enumerated opreation type, op(A)", 
    "transA": "enumerated opreation type, op(A)", 
    "transB": "enumerated opreation type, op(B)", 
    "transX": "enumerated opreation type, op(X)", 
    "transXY": "enumerated opreation type, op(X) and op(Y)", 
    "transa": "enumerated opreation type, op(A)", 
    "transb": "enumerated opreation type, op(B)", 
    "type": "enumerated matrix type", 
    "userEllWidth": "width of the regular (ELL) part of the matrix in HYB format, which should be less than the maximum number of nonzeros per row and is only required if partitionType == CUSPARSE_HYB_PARTITION_USER", 
    "version": "library version number", 
    "x": "vector", 
    "xInd": "integer vector of nnz indices corresponding to the nonzero values", 
    "xVal": "vector containing nnz data values", 
    "y": "vector"
}